<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Accidentally Architecting]]></title>
  <link href="http://mcsnootch.github.io/atom.xml" rel="self"/>
  <link href="http://mcsnootch.github.io/"/>
  <updated>2014-06-19T17:51:19+01:00</updated>
  <id>http://mcsnootch.github.io/</id>
  <author>
    <name><![CDATA[James Roberts]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JDBI, Oracle and null]]></title>
    <link href="http://mcsnootch.github.io/blog/2014/06/19/jdbi-oracle-and-null/"/>
    <updated>2014-06-19T15:59:43+01:00</updated>
    <id>http://mcsnootch.github.io/blog/2014/06/19/jdbi-oracle-and-null</id>
    <content type="html"><![CDATA[<p><a href="http://jdbi.org">JDBI</a> is a pretty neat framework for a light-touch integration with JDBC in your application.
t&rsquo;s SQL Object API lets you annotate an interface with straight SQL queries like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">FooDao</span> <span class="o">{</span>
</span><span class='line'>   <span class="nd">@SqlInsert</span><span class="o">(</span> <span class="s">&quot;insert into bar values (:foo)&quot;</span> <span class="o">)</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span> <span class="nd">@Bind</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">foo</span> <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>then get dbi to create you an instance of this dao which will magically prepare and execute the statements you&rsquo;ve bound to the methods in the interface.</p>

<p>But try supplying null as a parameter to your dao, and you&rsquo;ll get a nasty surprise:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FooDao</span> <span class="n">dao</span> <span class="o">=</span> <span class="n">dbi</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">FooDao</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">dao</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>results in a lengthy stack trace culminating in:</p>

<pre><code>Caused by: ! java.sql.SQLException: Invalid column type: 1111
</code></pre>

<p>Ugh.</p>

<p>Why is this happening? Well, under the hood JDBI is unable to work out the type of your null argument, and falls back to treating your parameter as an instance of Object, leading to a JDBI ObjectArgument being created to bind your parameter into the PreparedStatement it&rsquo;s building for you under the covers. When this ObjectArgument is applied to your query it does this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">PreparedStatement</span> <span class="n">statement</span><span class="o">,</span> <span class="n">StatementContext</span> <span class="n">ctx</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">statement</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">statement</span><span class="o">.</span><span class="na">setNull</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">Types</span><span class="o">.</span><span class="na">OTHER</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our null parameter is successfully mapped to a setNull on the statement, but the sql type supplied to statement gets the Oracle driver&rsquo;s knickers in a twist, as it doesn&rsquo;t recognise <code>java.sql.Types.OTHER</code> as a valid sql type, and throws up at your feet.</p>

<p>Fortunately, JDBI gives us an opportunity to extend it&rsquo;s functionality by registering somethigng with it which will set the correct sql type for the finicky Oracle driver:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NullArgumentFactory</span> <span class="kd">implements</span> <span class="n">ArgumentFactory</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">accepts</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">expectedType</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="n">StatementContext</span> <span class="n">ctx</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">Argument</span> <span class="nf">build</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">expectedType</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="n">StatementContext</span> <span class="n">ctx</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="k">new</span> <span class="nf">NullArgument</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="kd">class</span> <span class="nc">NullArgument</span> <span class="kd">implements</span> <span class="n">Argument</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>         <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">PreparedStatement</span> <span class="n">statement</span><span class="o">,</span> <span class="n">StatementContext</span> <span class="n">ctx</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">statement</span><span class="o">.</span><span class="na">setNull</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">Types</span><span class="o">.</span><span class="na">NULL</span><span class="o">);</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>then register this with your DBI instance when youre setting things up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DBI</span> <span class="n">dbi</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DBI</span><span class="o">(</span><span class="n">datasource</span><span class="o">);</span>
</span><span class='line'><span class="n">dbi</span><span class="o">.</span><span class="na">registerArgumentFactory</span><span class="o">(</span> <span class="k">new</span> <span class="n">NullArgumentFactory</span><span class="o">()</span> <span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database schema migrations and Dropwizard]]></title>
    <link href="http://mcsnootch.github.io/blog/2014/03/25/database-migrations-and-dropwizard/"/>
    <updated>2014-03-25T22:10:18+00:00</updated>
    <id>http://mcsnootch.github.io/blog/2014/03/25/database-migrations-and-dropwizard</id>
    <content type="html"><![CDATA[<p>One of the problems with writing applications backed by a datastore is that the metadata describing the datastore (DDL in the SQL world) needs to be applied to the datastore in step with the code which accesses that store. Previous versions of the application code may work well with a more advanced version of the schema, but a newer version of your code almost certainly won&rsquo;t work well with an old version of your database.</p>

<!-- more -->


<p>The noSQL crowd may scoff at these concerns, merrily migrating their data formats as they go<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, but those of us slaving away with good old relational tech need some way to move our schemas on with the code. To achieve this outside of the ivory tower, we&rsquo;ve tried the following approaches:</p>

<ul>
<li> Running migrations ourselves (horrible, involves very fallible people, highly prone to result in datastores out of sync with application code, slow)</li>
<li> Sending sql scripts to DBAs to run in QA/production/wherever (horrible, involves slightly less fallible people, slow)</li>
<li>Bundling scripts with our releases, getting a DBA to check it out and run in QA/production/wherever (horrible, involves people, again, only slightly less prone to result in a database out of step with application code)</li>
<li>Writing a platform-specific migration tool which <em>still</em> needs a DBA to press a button (horrible, expensive, buggy, people etc. etc.)</li>
<li>Using a general purpose migration tool which takes migrations checked into the code, and having DBAs run it in QA/production/wherever (people, bloody people!)</li>
</ul>


<p>These are all objectively horrible solutions to the problem that our application code isn&rsquo;t taking the responsibility to ensure that it&rsquo;s datastore is compatible with it. So, we&rsquo;ve finally settled on checking our migrations alongside our application code and having our applications migrate their own datastore.</p>

<p>I&rsquo;ve really been enjoying developing applications with Dropwizard, and amongst it&rsquo;s many lovely features are support for migrations using Liquibase. Unfortunately, it&rsquo;s default migration commands don&rsquo;t run as the server starts up and need to be explicitly called outside of application startup. We could try chucking the migration command into our deployment scripts, but this feels inelegant, or we could skip using Dropwizard&rsquo;s liquibase support and roll our own, parsing or duplicating our application&rsquo;s database configuration ourselves. If you&rsquo;re lazy like me, though, and appreciate the idea of someone else loading config, providing a conventional location for the migration code and all that jazz, here&rsquo;s how to borrow Dropwizard&rsquo;s migration command and reuse it for your own purpose:</p>

<pre><code>  @Override
  public void run(YourServiceConfig config, Environment environment) throws Exception {
     ManagedLiquibase liquibase = new ManagedLiquibase(config.getDatabaseConfiguration());
     liquibase.update("");

     // other setup and wiring here
  }
</code></pre>

<p>and that&rsquo;s all there is to it. Starting your Dropwizard application should now migrate your schema to to application appropriate version, without your having to lift a finger.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>provided, of course, that they&rsquo;ve remembered to version the data they&rsquo;ve stuffed into the schemaless sump created for themselves, and can work out how to get that customer object created three years ago as version one up to today&rsquo;s version one bazillion without their tests imploding and their QA suffering an aneurysm<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
